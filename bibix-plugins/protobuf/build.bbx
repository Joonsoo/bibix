import bibix
import curl
from git("https://github.com/Joonsoo/bibix.git", branch="main", path="bibix-plugins") import ktjvm
from git("https://github.com/Joonsoo/bibix.git", branch="main", path="bibix-plugins") import zip
import maven
import jvm

arg protobufVersion: string = "3.20.0"

implTemplate = bibix.genRuleImplTemplateKt(
  rules = [
    protobuf.schema,
    protobuf.protoset,
    protobuf.cpp,
    protobuf.csharp,
    protobuf.java,
    protobuf.javascript,
    protobuf.kotlin,
    protobuf.objc,
    protobuf.php,
    protobuf.python,
    protobuf.ruby,
    protobuf.dart
  ],
  types = [protobuf.ProtoSchema],
  implName = "com.giyeok.bibix.plugins.protobuf.CompileImpl",
  implInterfaceName = "com.giyeok.bibix.plugins.protobuf.CompileInterface",
)

impl = ktjvm.library(
  srcs = glob("src/**/*.kt") + (implTemplate as list<file>),
  deps = [
    bibix.base(),
    maven.dep("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", "1.6.20"),
  ],
)

class ProtoSchema = (schemaFiles: set<file>, includes: set<path>)

def protocDownloadUrl(
  os: OS = env.os,
  arch: Arch = env.arch,
  protobufVersion: string = protobufVersion,
): string = impl:com.giyeok.bibix.plugins.protobuf.ProtocDownloadUrl

protocPath = zip.unzip(curl.download(protocDownloadUrl()))

def schema(
  srcs: set<file>,
  deps: set<ProtoSchema> = [],
  protocPath: directory = protocPath,
): ProtoSchema = impl:com.giyeok.bibix.plugins.protobuf.Compile:schema

def protoset(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
  outputFileName?: string,
): file = impl:com.giyeok.bibix.plugins.protobuf.Compile:protoset

def cpp(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:cpp

def csharp(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:csharp

def java(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:java

// --js_out=import_style=commonjs,binary:<dest directory> 식으로 쓰는 경우를 위한 추가 파라메터 필요
def javascript(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:javascript

def kotlin(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:kotlin

def objc(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:objc

def php(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:php

def python(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:python

def ruby(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:ruby

def dart(
  schema: ProtoSchema,
  os: OS = env.os,
  protocPath: directory = protocPath,
): set<file> = impl:com.giyeok.bibix.plugins.protobuf.Compile:dart

// TODO go
