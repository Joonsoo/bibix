import jvm
import maven
import file
from bibix.plugins import scala
from bibix.plugins import ktjvm
from bibix.plugins import protobuf
from bibix.plugins import grpc
from bibix.plugins import java
from bibix.plugins import jar

bibixVersion = "0.5.3"

base {
  proto {
    schema = protobuf.schema(glob("bibix-base/src/proto/*.proto"))

    javacode = protobuf.java(schema)
    kotlincode = protobuf.kotlin(schema)

    action generate {
      file.clearDirectory("bibix-base/src/generated/proto/java")
      file.clearDirectory("bibix-base/src/generated/proto/kotlin")
      file.copyDirectory(javacode.rootDir, "bibix-base/src/generated/proto/java")
      file.copyDirectory(kotlincode.rootDir, "bibix-base/src/generated/proto/kotlin")
    }

    javalib = java.library(
      srcs = glob("bibix-base/src/generated/proto/java/**/*.java"),
      deps = protobufDeps,
    )

    lib = ktjvm.library(
      srcs = glob("bibix-base/src/generated/proto/kotlin/**/*.kt"),
      deps = [javalib],
    )
  }

  main = ktjvm.library(
    srcs = glob("bibix-base/src/main/kotlin/**/*.kt"),
    deps = [
      ...kotlinxCoroutinesDeps,
      ...protobufDeps,
      base.proto.lib,
    ]
  )

  uberJar = jar.uberJar([main], "bibix-base-$bibixVersion-all.jar")
}

parser {
  main = ktjvm.library(
    srcs = glob("bibix-parser/src/generated/kotlin/**/*.kt"),
    resources = glob("bibix-parser/src/generated/resources/**"),
    deps = [
      ...jparserDeps,
      maven.artifact("org.scala-lang", "scala-library", "2.13.10"),
      ...protobufDeps
    ],
  )

  test = ktjvm.library(
    srcs = glob("bibix-parser/src/test/kotlin/**/*.kt"),
    deps = [...testDeps, parser.main]
  )
}

mavenResolverVersion = "1.9.5"

core {
  main = ktjvm.library(
    srcs = glob("bibix-core/src/main/kotlin/**/*.kt"),
    deps = [
      base.main,
      parser.main,
      ...kotlinxCoroutinesDeps,
      ...protobufDeps,
      maven.artifact("org.jetbrains.kotlin", "kotlin-reflect", kotlinVersion),
      maven.artifact("org.codehaus.plexus", "plexus-classworlds", "2.6.0"),
      maven.artifact("org.eclipse.jgit", "org.eclipse.jgit", "6.4.0.202211300538-r"),

      maven.artifact("org.apache.maven", "maven-resolver-provider", "3.6.1"),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-api", mavenResolverVersion),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-spi", mavenResolverVersion),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-impl", mavenResolverVersion),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-util", mavenResolverVersion),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-connector-basic", mavenResolverVersion),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-transport-file", mavenResolverVersion),
      maven.artifact("org.apache.maven.resolver", "maven-resolver-transport-http", mavenResolverVersion),

      maven.artifact("commons-codec", "commons-codec", "1.15"),

      ...floggerDeps,
    ]
  )

  test = ktjvm.library(
    srcs = glob("bibix-core/src/test/kotlin/**/*.kt"),
    deps = [
      ...testDeps,
      ...truthDeps,
      jimfsDep,
      main,
    ],
  )

  uberJar = jar.executableUberJar(
    [main],
    mainClass="com.giyeok.bibix.frontend.cli.BibixCli",
    jarFileName="bibix-$bibixVersion-all.jar"
  )
}

intellij {
  proto {
    schema = protobuf.schema(glob("bibix-intellij/src/proto/*.proto"))

    protoJavaCode = protobuf.java(schema)
    protoKotlinCode = protobuf.kotlin(schema)

    grpcJavaCode = grpc.java(schema)
    grpcKotlinCode = grpc.kotlin(schema)

    action generate {
      file.clearDirectory("bibix-intellij/src/generated/proto/java")
      file.clearDirectory("bibix-intellij/src/generated/proto/kotlin")
      file.copyDirectory(protoJavaCode.rootDir, "bibix-intellij/src/generated/proto/java")
      file.copyDirectory(protoKotlinCode.rootDir, "bibix-intellij/src/generated/proto/kotlin")

      file.clearDirectory("bibix-intellij/src/generated/grpc/java")
      file.clearDirectory("bibix-intellij/src/generated/grpc/kotlin")
      file.copyDirectory(grpcJavaCode.rootDir, "bibix-intellij/src/generated/grpc/java")
      file.copyDirectory(grpcKotlinCode.rootDir, "bibix-intellij/src/generated/grpc/kotlin")
    }

    javalib = java.library(
      srcs = [
        ...glob("bibix-intellij/src/generated/proto/java/**/*.java"),
        ...glob("bibix-intellij/src/generated/grpc/java/**/*.java"),
      ],
      deps = [
        ...protobufDeps,
        ...grpcDeps,
      ],
    )
    lib = ktjvm.library(
      srcs = [
        ...glob("bibix-intellij/src/generated/proto/kotlin/**/*.kt"),
        ...glob("bibix-intellij/src/generated/grpc/kotlin/**/*.kt"),
      ],
      deps = [
        javalib,
        ...kotlinxCoroutinesDeps,
        ...grpcDeps,
      ],
    )
  }

  main = ktjvm.library(
    srcs = glob("bibix-intellij/src/main/kotlin/**/*.kt"),
    deps = [
      intellij.proto.lib,
      core.main,
      ...grpcDeps,
    ]
  )

  test = ktjvm.library(
    srcs = glob("bibix-intellij/src/test/kotlin/**/*.kt"),
    deps = [
      ...testDeps,
      ...truthDeps,
      jimfsDep,
    ]
  )

  uberJar = jar.executableUberJar(
    [main],
    mainClass="com.giyeok.bibix.intellij.service.BibixIntellijServiceGrpcServerMain",
    jarFileName="bibix-intellij-daemon-$bibixVersion-all.jar"
  )
}

from bibix.plugins import mustache

action buildRelease {
  file.copyFile(
    mustache.render("bibix-base/src/template/Constants.kt.template", [("BIBIX_VERSION", bibixVersion)]),
    "bibix-base/src/main/kotlin/com/giyeok/bibix/base/Constants.kt"
  )
  file.clearDirectory("release")
  file.copyFile(base.uberJar, "release")
  file.copyFile(core.uberJar, "release")
  file.copyFile(intellij.uberJar, "release")
}

jparserDeps = [
  jvm.lib("lib/jparser-base-proto-0.5.0.jar"),
  jvm.lib("lib/jparser-milestone2-proto-0.5.0.jar"),
  jvm.lib("lib/jparser-mgroup2-proto-0.5.0.jar"),
  jvm.lib("lib/jparser-ktlib-0.5.0.jar"),
  jvm.lib("lib/jparser-ktparser-0.5.0.jar"),
]

kotlinVersion = "1.8.10"
var ktjvm.compilerVersion = kotlinVersion
var ktjvm.sdkVersion = kotlinVersion

kotlinxCoroutinesVersion = "1.6.0"
kotlinxCoroutinesDeps = [
  maven.artifact("org.jetbrains.kotlinx", "kotlinx-coroutines-core", kotlinxCoroutinesVersion),
  maven.artifact("org.jetbrains.kotlinx", "kotlinx-coroutines-jdk8", kotlinxCoroutinesVersion),
]

protobufVersion = "3.22.0"
protobufDeps = [
  maven.artifact("com.google.protobuf", "protobuf-java", protobufVersion),
  maven.artifact("com.google.protobuf", "protobuf-java-util", protobufVersion),
  maven.artifact("com.google.protobuf", "protobuf-kotlin", protobufVersion),
]

floggerVersion = "0.7.4"
floggerDeps = [
  maven.artifact("com.google.flogger", "flogger", floggerVersion),
  maven.artifact("com.google.flogger", "flogger-system-backend", floggerVersion),
  maven.artifact("org.slf4j", "slf4j-api", "1.7.36"),
]

testDeps = [
  // maven.artifact("junit", "junit", "4.12"),
  maven.artifact("org.junit.jupiter", "junit-jupiter-api", "5.8.2"),
  maven.artifact("org.jetbrains.kotlin", "kotlin-test", kotlinVersion),
]

truthVersion = "1.1.3"
truthDeps = [
  maven.artifact("com.google.truth", "truth", truthVersion),
  maven.artifact("com.google.truth.extensions", "truth-proto-extension", truthVersion),
]

jimfsDep = maven.artifact("com.google.jimfs", "jimfs", "1.2")

grpcVersion = "1.53.0"
grpcDeps = [
  maven.artifact("io.grpc", "grpc-api", grpcVersion),
  maven.artifact("io.grpc", "grpc-services", grpcVersion),
  maven.artifact("io.grpc", "grpc-stub", grpcVersion),
  maven.artifact("io.grpc", "grpc-netty-shaded", grpcVersion),
  maven.artifact("io.grpc", "grpc-kotlin-stub", "1.3.0"),
  maven.artifact("com.google.guava", "guava", "31.1-jre"),
  maven.artifact("com.google.errorprone", "error_prone_annotations", "2.14.0"),
]
