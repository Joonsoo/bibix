import git("https://github.com/Joonsoo/jparser.git") as jparser
import maven
import jvm
import java
from bibix.plugins() import ktjvm
from bibix.plugins() import scala
from bibix.plugins() import protobuf
from bibix.plugins() import junit5
from bibix.devPlugins() import grpc
import bibix

jparserVersion = "0.5"

// arg kotlinVersion: string = "1.6.10"
// -> kotlinVersion이라는 이름의 arg 정의. 기본값은 "1.6.10"

// let ktjvm.kotlinVersion = "1.6.10"
// -> ktjvm.kotlinVersion이라는 이름의 arg의 기본값을 변경. 이렇게 해도 여전히 cli에서 값 변경 가능
// let fix ktjvm.kotlinVersion = "1.6.10"
// -> 이렇게 "fix"를 추가하면 ktjvm.kotlinVersion은 cli에서 설정이 불가능해짐.

// arg kotlinVersion: string = "1.6.10"
// let ktjvm.kotlinVersion = kotlinVersion
// -> kotlinVersion이라는 이름의 arg를 정의하고 ktjvm.kotlinVersion의 값을 kotlinVersion의 값으로 설정.

// let ktjvm.kotlinVersion = arg kotlinVersion: string = "1.6.10"
// -> 이런 식의 syntactic sugar가 필요할까?

// bibix에서 A = B 는 대체로 A라는 이름의 무언가를 새로 정의/선언하는 의미로 쓰이기 때문에 let 키워드를 쓰게 하는 편이 나을 것 같음.
// -> 아니면 ktjvm.kotlinVersion := "1.6.10" 처럼 ":=" 같은 연산자를 만들어도 되는데 let이 더 명확해 보임
// -> 키워드가 let이 제일 나은지는 고민 필요. "let" + "let fix", "set" + "fix", ":=" + "::=", 등등.. 가장 예쁜게 어느쪽인지 고민 필요

floggerVersion = "0.7.4"

// parserData = jparser.parsergen(
//   src = "bibix.cdg",
//   objectName = "BibixAst",
//   parserDataFile = "parserdata.pb"
// )

// ast = scala.library(
//   srcs = [parserData.astCode],
//   deps = [
//     jparser.base,
//     jparser.fast,
//     maven.dep("org.scala-lang", "scala-library", "2.13.8"),
//   ],
//   resources = [parserData.parserData]
// )

ast0 = scala.library(
  srcs = [
    "bibix-ast/src/generated/scala/com/giyeok/bibix/ast/BibixAst.scala",
  ],
  deps = [
    jvm.lib("lib/jparser-base-0.2.3.jar"),
    jvm.lib("lib/jparser-fast-0.2.3.jar"),
    jvm.lib("lib/jparser-naive-0.2.3.jar"),
    jvm.lib("lib/jparser-utils-0.2.3.jar"),
    maven.dep("org.scala-lang", "scala-library", "2.13.8"),
    maven.dep("com.google.protobuf", "protobuf-java", "3.19.4"),
    maven.dep("com.google.protobuf", "protobuf-java-util", "3.19.4"),
  ],
  //resources = ["bibix-ast/src/generated/resources/parserdata.pb"],
)

ast0Jar = jvm.jar(deps=[ast0], jarFileName="bibix-ast-0.0.3.jar")

namespace proto {
  schema = protobuf.schema(
    srcs = [
      "bibix-core/src/main/protobuf/ids.proto",
      "bibix-core/src/main/protobuf/repo.proto",
      "bibix-core/src/main/protobuf/run_config.proto",
      "bibix-core/src/main/protobuf/values.proto",
      "bibix-core/src/main/protobuf/api.proto",
    ]
  )

  protoset = protobuf.protoset(schema=schema)
  javaprotosrc = protobuf.java(schema)
  javagrpcsrc = grpc.java(schema)
  javalib = java.library(
    srcs = javaprotosrc + javagrpcsrc,
    deps = [
      maven.dep("com.google.protobuf", "protobuf-java", "3.19.4"),
      maven.dep("io.grpc", "grpc-all", "1.46.0"),
      maven.dep("javax.annotation", "javax.annotation-api", "1.3.2"),
    ],
  )
  kotlinprotosrc = protobuf.kotlin(schema)
  kotlingrpcsrc = grpc.kotlin(schema)
  kotlinlib = ktjvm.library(
    srcs = kotlinprotosrc + kotlingrpcsrc,
    deps = [
      javalib,
      maven.dep("com.google.protobuf", "protobuf-kotlin", "3.19.4"),
      maven.dep("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", kotlinVersion),
      maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-core", "1.6.1"),
      maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-jdk8", "1.6.1"),
      maven.dep("io.grpc", "grpc-kotlin-stub", "1.2.1"),
    ],
    optIns = ["kotlin.RequiresOptIn"]
  )
}

base = ktjvm.library(
  srcs = glob("bibix-base/src/main/kotlin/**/*.kt"),
  deps = [
    maven.dep("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", kotlinVersion),
    // proto.javalib,
    proto.kotlinlib,
  ]
)

core = ktjvm.library(
  srcs = glob("bibix-core/src/main/kotlin/**/*.kt"),
  deps = [
    base,
    ast0,

    maven.dep("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", kotlinVersion),
    maven.dep("org.jetbrains.kotlin", "kotlin-reflect", kotlinVersion),
    maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-core", "1.6.1"),
    maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-jdk8", "1.6.1"),

    maven.dep("com.google.protobuf", "protobuf-java-util", "3.19.4"),
    maven.dep("com.fasterxml.jackson.core", "jackson-databind", "2.13.1"),
    maven.dep("com.fasterxml.jackson.module", "jackson-module-kotlin", "2.13.1"),

    maven.dep("io.grpc", "grpc-netty-shaded", "1.41.0"),
    maven.dep("io.grpc", "grpc-services", "1.41.0"),
    maven.dep("io.grpc", "grpc-kotlin-stub", "1.2.1"),

    maven.dep("org.codehaus.plexus", "plexus-classworlds", "2.6.0"),
    maven.dep("org.eclipse.jgit", "org.eclipse.jgit", "6.1.0.202203080745-r"),
    maven.dep("org.apache.maven", "maven-resolver-provider", "3.8.5"),
    maven.dep("org.apache.maven.resolver", "maven-resolver-connector-basic", "1.7.3"),
    maven.dep("org.apache.maven.resolver", "maven-resolver-transport-file", "1.7.3"),
    maven.dep("org.apache.maven.resolver", "maven-resolver-transport-http", "1.7.3"),

    maven.dep("com.google.flogger", "flogger", floggerVersion),
    maven.dep("com.google.flogger", "flogger-system-backend", floggerVersion),
    maven.dep("commons-logging", "commons-logging", "1.2"),
  ],
)

junitVersion = "5.8.2"

testDeps = [
  maven.dep("com.google.jimfs", "jimfs", "1.2"),
  maven.dep("org.junit.jupiter", "junit-jupiter-api", junitVersion, scope=maven.ScopeType.test),
  maven.dep("com.google.truth", "truth", "1.1.3"),
  // runtime deps?
  maven.dep("org.junit.jupiter", "junit-jupiter-engine", junitVersion, scope=maven.ScopeType.test),
]

action coreTest = junit5.runTests(
  deps=[
    ktjvm.library(
      srcs = glob("bibix-core/src/test/kotlin/**/*.kt"),
      deps = testDeps + [core],
    ),
  ]
)

uberJar = jvm.executableUberJar(
  deps = [core],
  mainClass = "com.giyeok.bibix.frontend.cli.BibixCli",
  jarFileName = "bibix-${env.bibixVersion}.jar"
)

action run(args) = jvm.run(
  deps = [core],
  mainClass = "com.giyeok.bibix.frontend.cli.BibixCli",
  args = args,
)
