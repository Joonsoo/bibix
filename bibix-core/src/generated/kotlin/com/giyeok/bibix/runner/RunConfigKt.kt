//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: run_config.proto

package com.giyeok.bibix.runner;

@kotlin.jvm.JvmSynthetic
public inline fun runConfig(block: com.giyeok.bibix.runner.RunConfigKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.runner.RunConfigProto.RunConfig =
  com.giyeok.bibix.runner.RunConfigKt.Dsl._create(com.giyeok.bibix.runner.RunConfigProto.RunConfig.newBuilder()).apply { block() }._build()
public object RunConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.runner.RunConfigProto.RunConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.runner.RunConfigProto.RunConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.runner.RunConfigProto.RunConfig = _builder.build()

    /**
     * <code>int32 max_threads = 1;</code>
     */
    public var maxThreads: kotlin.Int
      @JvmName("getMaxThreads")
      get() = _builder.getMaxThreads()
      @JvmName("setMaxThreads")
      set(value) {
        _builder.setMaxThreads(value)
      }
    /**
     * <code>int32 max_threads = 1;</code>
     */
    public fun clearMaxThreads() {
      _builder.clearMaxThreads()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.giyeok.bibix.runner.RunConfigProto.RunConfig.copy(block: com.giyeok.bibix.runner.RunConfigKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.runner.RunConfigProto.RunConfig =
  com.giyeok.bibix.runner.RunConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()
