//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package com.giyeok.bibix.daemon;

@kotlin.jvm.JvmSynthetic
public inline fun builtTargetInfo(block: com.giyeok.bibix.daemon.BuiltTargetInfoKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo =
  com.giyeok.bibix.daemon.BuiltTargetInfoKt.Dsl._create(com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo.newBuilder()).apply { block() }._build()
public object BuiltTargetInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo = _builder.build()

    /**
     * <code>.com.giyeok.bibix.runner.BibixValue value = 1;</code>
     */
    public var value: com.giyeok.bibix.runner.BibixValueProto.BibixValue
      @JvmName("getValue")
      get() = _builder.getValue()
      @JvmName("setValue")
      set(value) {
        _builder.setValue(value)
      }
    /**
     * <code>.com.giyeok.bibix.runner.BibixValue value = 1;</code>
     */
    public fun clearValue() {
      _builder.clearValue()
    }
    /**
     * <code>.com.giyeok.bibix.runner.BibixValue value = 1;</code>
     * @return Whether the value field is set.
     */
    public fun hasValue(): kotlin.Boolean {
      return _builder.hasValue()
    }

    /**
     * <code>.com.giyeok.bibix.runner.ObjectIdHash object_id = 2;</code>
     */
    public var objectId: com.giyeok.bibix.runner.BibixIdProto.ObjectIdHash
      @JvmName("getObjectId")
      get() = _builder.getObjectId()
      @JvmName("setObjectId")
      set(value) {
        _builder.setObjectId(value)
      }
    /**
     * <code>.com.giyeok.bibix.runner.ObjectIdHash object_id = 2;</code>
     */
    public fun clearObjectId() {
      _builder.clearObjectId()
    }
    /**
     * <code>.com.giyeok.bibix.runner.ObjectIdHash object_id = 2;</code>
     * @return Whether the objectId field is set.
     */
    public fun hasObjectId(): kotlin.Boolean {
      return _builder.hasObjectId()
    }

    /**
     * <pre>
     * Optional. destination directory가 만들어졌을 때만 설정
     * </pre>
     *
     * <code>string object_path = 3;</code>
     */
    public var objectPath: kotlin.String
      @JvmName("getObjectPath")
      get() = _builder.getObjectPath()
      @JvmName("setObjectPath")
      set(value) {
        _builder.setObjectPath(value)
      }
    /**
     * <pre>
     * Optional. destination directory가 만들어졌을 때만 설정
     * </pre>
     *
     * <code>string object_path = 3;</code>
     */
    public fun clearObjectPath() {
      _builder.clearObjectPath()
    }

    /**
     * <pre>
     * Optional. output 디렉토리가 만들어졌을 때만 설정
     * </pre>
     *
     * <code>string output_path = 4;</code>
     */
    public var outputPath: kotlin.String
      @JvmName("getOutputPath")
      get() = _builder.getOutputPath()
      @JvmName("setOutputPath")
      set(value) {
        _builder.setOutputPath(value)
      }
    /**
     * <pre>
     * Optional. output 디렉토리가 만들어졌을 때만 설정
     * </pre>
     *
     * <code>string output_path = 4;</code>
     */
    public fun clearOutputPath() {
      _builder.clearOutputPath()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo.copy(block: com.giyeok.bibix.daemon.BuiltTargetInfoKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.daemon.BibixDaemonApiProto.BuiltTargetInfo =
  com.giyeok.bibix.daemon.BuiltTargetInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
