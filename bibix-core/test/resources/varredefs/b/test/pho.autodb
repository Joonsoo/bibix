schema Phoclub {
  var db: SqlDatabase = SqlDatabase("")
  var userShards: List<SqlTable>

  extern fun now(): Timestamp
  extern fun simpleTimeBasedId(): Long
  extern fun simpleLockId(): Long

  lock: Long = simpleLockId()

  var userReleaseNotifier: LockReleaseNotifier<User, Long>

  var eventReleaseNotifier: LockReleaseNotifier<Event, Long>

  var itemReleaseNotifier: LockReleaseNotifier<Item, Long>
  var userItemReleaseNotifier: LockReleaseNotifier<UserItem, Long>

  var shareGroupReleaseNotifier: LockReleaseNotifier<ShareGroup, Long>
  var shareGroupItemReleaseNotifier: LockReleaseNotifier<ShareGroupItem, Long>
  var shareGroupEventReleaseNotifier: LockReleaseNotifier<ShareGroupEvent, Long>
  var shareGroupMemberReleaseNotifier: LockReleaseNotifier<ShareGroupMember, Long>

  var friendReleaseNotifier: LockReleaseNotifier<Friend, Long>
  var phoneBookEntryReleaseNotifier: LockReleaseNotifier<PhoneBookEntry, Long>

  entity User(
    computed final id: Long = autoIncrement
    computed final createTime: Timestamp = now()
    name: String
    // profileImagePath: 서버측 path
    profileImagePath: String?
    storageUsed: Long
  ) {
    key(id)
    storage = userShards[0]

    lock {
      releaseNotifier = userReleaseNotifier
    }

    view PrivateUserView(1 key, 2 createTime, 3 name)
    view UserView(1 key, 2 createTime, 3 name)

    query findUser(finding: Ref<User>) = rows().find(key == finding)
    query findInUsers(keys: Collection<Ref<User>>) =
      rows().filter(key in keys)

    update incrementStorageUsed(finding: Ref<User>, amount: Long) {
      rows().filter(key == finding).update(storageUsed = storageUsed + amount)
    }

    query allRows7() = rows().filter { _.id > 10 }
  }

  entity UserLogin(
    user: Ref<User>
    computed final id: Long = simpleTimeBasedId()
    computed final createTime: Timestamp = now()
    description: String
    firebaseUid: String?
    phoneNumber: String?
  ) {
    key(user, id)
    unique(firebaseUid)
    storage = SqlTable(db, "user_logins")

    query findByFirebaseUid(uid: String) =
      rows().findOrNull(firebaseUid == uid)

    view UserLoginView(1 key, 2 createTime, 3 description)
  }

  entity RefreshToken(
    user: Ref<User>
    computed final id: Long = simpleTimeBasedId()
    refreshToken: String(150)
    expireTime: Timestamp
    invalidated: Boolean = false
  ) {
    key(user, id)
    unique(refreshToken)
    storage = SqlTable(db, "refresh_tokens")

    query findByToken(refreshToken: String) =
      rows().findOrNull { _.refreshToken == refreshToken }

    update invalidateToken(key: Ref<RefreshToken>) {
      rows().filter { _.key == key }.update(invalidated=true)
    }
  }

  // entity Payment()

  // entity PaymentShare()

  // 아이템의 생성 시각은 date_time_original -> date_time_creation -> last_modify_time 순서로 본다
  record ItemMeta(
    1 width: Int?
    2 height: Int?
    3 date_time_creation: Timestamp?
    4 date_time_original: Timestamp?
    5 latitude: Double?
    6 longitude: Double?
    7 altitude: Double?
    // TODO 촬영 장비, 초점, ISO 등등
  )

  record Location(
    1 latitude: Double
    2 longitude: Double
    3 altitude: Double?
  )

  record VideoMeta(
    1 length: Duration
    // TODO 추가 정보
  )

  // 이미지 혹은 비디오
  entity Item(
    computed final id: Long = simpleTimeBasedId()
    owner: Ref<User>
    deviceId: String
    localFilePath: String(300)
    fileSize: Long
    lastModifyTime: Timestamp?
    sha256Sum: Bytes(32)

    // 아이템이 서버에 등록된 시각
    createTime: Timestamp

    // 아이템 메타
    itemMeta: ItemMeta
    // 아이템 메타에서 derive된 정보 - 아이템이 만들어진 시각
    itemCreateTime: Timestamp
    // 아이템 메타에서 derive된 정보 - 아이템의 위치 정보
    itemCreateLocation: Location?

    // video인 경우에만 존재
    videoMeta: VideoMeta?

    // 업로드 시작을 요청한 시각 - null이면 업로드가 진행중이 아님
    uploadStartTime: Timestamp?
    uploadDone: Boolean
    // 원본 파일의 S3 경로
    originalPath: String?
    // 썸네일의 S3 경로
    thumbnailPath: String?
    // 자세히 보기 파일의 S3 경로
    detailPath: String?

    // TODO 현재 공유 상태도 저장하는게 나을까?
    // 사용자가 trashItem으로 삭제한 시점.
    // 60일 이후에 자동으로 삭제되는 것으로 하자.
    // trashTime이 null이 아니면 없는 아이템 취급한다
    trashTime: Timestamp? = null
  ) {
    key(id)
    index(createTime)
    index(itemCreateTime)
    index(uploadStartTime)
    storage = SqlTable(db, "items")
    // deviceId까지 unique를 걸 필요는 없을 것 같음
    // 충돌나면 deviceId는 그냥 최신으로 업데이트
    unique(owner, localFilePath, fileSize, lastModifyTime, sha256Sum)

    lock {
      releaseNotifier = itemReleaseNotifier
    }

    query findById(finding: Ref<Item>) =
      rows().findOrNull(key == finding && trashTime == null)

    query selectByIds(keys: Collection<Ref<Item>>) =
      rows().filter(key in keys && trashTime == null)

    query findByLocalKey(
      owner: Ref<User>,
      deviceId: String,
      localFilePath: String,
      fileSize: Long,
      lastModifyTime: Timestamp?,
      sha256Sum: Bytes,
    ) = rows().findOrNull {
      _.owner == owner &&
      _.deviceId == deviceId &&
      _.localFilePath == localFilePath &&
      _.fileSize == fileSize &&
      _.lastModifyTime == lastModifyTime &&
      _.sha256Sum == sha256Sum
    }

    query findTrashedById(finding: Ref<Item>) =
      rows().findOrNull(key == finding && trashTime != null)

    // pageToken에서 trashTime desc 를 넣고 싶었는데 nullable이라 잘 안되네.. 하기도 애매하고..
    pageToken SelectTrashedPagedByTrashTimeDesc(1 key desc)

    query selectTrashed(user: Ref<User>, pageToken: SelectTrashedPagedByTrashTimeDesc?, pageSize: Int) =
      rows().filter { _.owner == user && _.trashTime != null }.pageBy(pageToken, pageSize)

    update updateUploadStarted(finding: Ref<Item>, newUploadStartTime: Timestamp, newOriginalPath: String) {
      rows().filter { _.key == finding }.update(
        uploadStartTime=newUploadStartTime,
        uploadDone=false,
        originalPath=newOriginalPath,
        thumbnailPath=null,
        detailPath=null,
      )
    }

    update updateUploadFailed(finding: Ref<Item>) {
      rows().filter { _.key == finding }.update(
        uploadStartTime=null,
        uploadDone=false,
        originalPath=null,
        thumbnailPath=null,
        detailPath=null,
      )
    }

    update updateUploadDone(finding: Ref<Item>, newOriginalPath: String, newThumbnailPath: String, newDetailPath: String) {
      rows().filter { _.key == finding }.update(
        uploadStartTime=null,
        uploadDone=true,
        originalPath=newOriginalPath,
        thumbnailPath=newThumbnailPath,
        detailPath=newDetailPath,
      )
    }

    update updateDeviceId(finding: Ref<Item>, newDeviceId: String) {
      rows().filter { _.key == finding }.update(deviceId=newDeviceId)
    }
  }

  entity ItemDuplicate(
    original: Ref<Item>
    duplicate: Ref<Item>
  ) {
    key(original, duplicate)
    storage = SqlTable(db, "item_duplicates")
  }

  entity Event(
    computed final id: Long = simpleTimeBasedId()
    user: Ref<User>
    name: String
    // 이벤트에 대한 설명 - 장소, 시간 등
    // 사용자가 설명 수정 혹은 삭제 가능
    description: String
    // 포함된 아이템 갯수
    itemsCount: Int
    // 이벤트의 시작 시각-종료 시각
    itemsStartTime: Timestamp
    itemsEndTime: Timestamp

    // (기존에 있던) thumbnail은 삭제. 서버가 자동 할당하는 summaryItems로 대체한다.
    // 사용자가 좋아요 표시한 아이템이 있으면 summaryItems는 그 아이템들 위주로 설정한다.
    // (TODO) 좋아요 표시한 아이템 외에는 적당히 "잘 나온" 사진들 위주로 설정
    // summaryItems가 비어있으면 서버가 그 시점에 새로 설정해주어야 한다.
    summaryItems: SummaryItems?

    // 자동 생성된 경우엔 userTouched=false이고 서버가 변경할 수 있음
    // 사용자가 변경하거나 건드리는 등의 조작을 하면 userTouched=true가 되고, 그러면 이 이벤트는 상수로 작동
    userTouched: Boolean = false
  ) {
    key(id)
    index(user)
    index(user, itemsStartTime)
    index(user, itemsEndTime)
    storage = SqlTable(db, "events")

    lock {
      releaseNotifier = eventReleaseNotifier
    }

    view EventView(
      1 key
      2 name
      3 description
      4 itemsCount
      // 5 itemsTimeRange: ItemsTimeRange = ItemsTimeRange(startTime=itemsStartTime, endTime=itemsEndTime)
    )

    query findByKey(key: Ref<Event>) =
      rows().findOrNull { _.key == key }

    pageToken EventPagedByKey(1 itemsStartTime desc, 2 key asc)

    // TODO 시간 범위 내의 이벤트 select, 특정 시점 이전의 latest 이벤트 n개, 특정 시점 이후의 가장 빠른 이벤트 n개

    query selectEventsContainingTime(user: Ref<User>, time: Timestamp) =
      rows().filter { _.user == user && _.itemsStartTime <= time && time <= _.itemsEndTime }

    query selectEventsBeforeTime(user: Ref<User>, time: Timestamp, count: Int) =
      rows().filter { _.user == user && _.itemsEndTime < time }.orderBy(itemsEndTime desc).take(count)

    query selectEventsAfterTime(user: Ref<User>, time: Timestamp, count: Int) =
      rows().filter { _.user == user && _.itemsStartTime > time }.orderBy(itemsStartTime asc).take(count)

    update addItem(event: Ref<Event>, newItemCreateTime: Timestamp) {
      rows().filter { _.key == event }.update(
        itemsCount = itemsCount + 1,
        itemsStartTime = min(itemsStartTime, newItemCreateTime),
        itemsEndTime = max(itemsEndTime, newItemCreateTime))
    }

    update updateNameAndDescription(event: Ref<Event>, newName: String, newDescription: String) {
      rows().filter { _.key == event }.update(name=newName, description=newDescription)
    }

    update updateSummaryItems(event: Ref<Event>, newSummaryItems: SummaryItems?) {
      rows().filter { _.key == event }.update(summaryItems = newSummaryItems)
    }

    query listByUser(user: Ref<User>, pageToken: EventPagedByKey?, pageSize: Int) =
      rows().filter { _.user == user }.pageBy(pageToken, pageSize)

    update deleteEvent(key: Ref<Event>) {
      rows().filter { _.key == key }.delete()
    }

    update updateItemsCount(key: Ref<Event>, newItemsCount: Int, newItemsStartTime: Timestamp, newItemsEndTime: Timestamp) {
      rows().filter { _.key == key }.update(
        itemsCount = newItemsCount,
        itemsStartTime = newItemsStartTime,
        itemsEndTime = newItemsEndTime,
        summaryItems = null)
    }
  }

  record ItemsTimeRange(1 startTime: Timestamp, 2 endTime: Timestamp)
  record SummaryItems(1 items: List<Ref<Item>>)

  entity UserItem(
    item: Ref<Item>
    user: Ref<User>
    // user에게 보이는 item이 user의 어떤 event로 표시될 것인지
    event: Ref<Event>?
    // item.itemCreateTime
    itemCreateTime: Timestamp
    // userAssignedEvent: 사용자가 지정한 이벤트이면 true, 기계가 자동으로 지정한 아이템이면 false
    userAssignedEvent: Boolean = false
    userReaction: ItemReactionType? = null
  ) {
    key(item, user)
    index(user, itemCreateTime)
    index(event, itemCreateTime)
    index(user, event)
    storage = SqlTable(db, "user_items")

    lock {
      releaseNotifier = userItemReleaseNotifier
    }

    view UserItemView(1 event, 2 item)

    query findByUserAndItem(user: Ref<User>, item: Ref<Item>) =
      rows().findOrNull { _.user == user && _.item == item }

    query selectUnassigned(user: Ref<User>, count: Int) =
      rows().filter { _.user == user && _.event == null && !_.userAssignedEvent }
            .orderBy(itemCreateTime desc)
            .take(count)

    query selectByEvent(user: Ref<User>, event: Ref<Event>) =
      rows().filter { _.user == user && _.event == event }

    query selectByEvent(user: Ref<User>, event: Ref<Event>, count: Int) =
      rows().filter { _.user == user && _.event == event }.take(count)

    update assignEvent(item: Ref<Item>, user: Ref<User>, newEvent: Ref<Event>?) {
      rows().filter { _.item == item && _.user == user }.update(event=newEvent)
    }

    update assignEvent(user: Ref<User>, items: Collection<Ref<Item>>, newEvent: Ref<Event>) {
      rows().filter { _.item in items && _.user == user && _.event == null }.update(event=newEvent)
    }

    update unassignEvent(user: Ref<User>, items: Collection<Ref<Item>>, oldEvent: Ref<Event>) {
      rows().filter { _.user == user && _.item in items && _.event == oldEvent }.update(event=null)
    }

    update checkAndAssignEvent(item: Ref<Item>, user: Ref<User>, oldEvent: Ref<Event>?, newEvent: Ref<Event>?) {
      rows().filter { _.item == item && _.user == user && _.event == oldEvent }.update(event=newEvent)
    }

    update unassignEvent(user: Ref<User>, event: Ref<Event>) {
      rows().filter { _.user == user && _.event == event }.update(event=null)
    }

    pageToken SelectUserItemPagedByCreateTimeDesc(1 itemCreateTime desc, 2 key desc)

    query selectByUser(user: Ref<User>, pageToken: SelectUserItemPagedByCreateTimeDesc?, pageSize: Int) =
      rows().filter { _.user == user }.pageBy(pageToken, pageSize)

    query selectByUserExceptEvents(
      user: Ref<User>,
      events: Collection<Ref<Event>>,
      pageToken: SelectUserItemPagedByCreateTimeDesc?,
      pageSize: Int
      // (_.event == null || _.event !in events)로 해야되나?
    ) = rows().filter { _.user == user && _.event !in events }.pageBy(pageToken, pageSize)

    query selectByUserNoEvent(user: Ref<User>, pageToken: SelectUserItemPagedByCreateTimeDesc?, pageSize: Int) =
      rows().filter { _.user == user && _.event == null }.pageBy(pageToken, pageSize)

    query selectByUserAndEvent(user: Ref<User>, event: Ref<Event>, pageToken: SelectUserItemPagedByCreateTimeDesc?, pageSize: Int) =
      rows().filter { _.user == user && _.event == event }.pageBy(pageToken, pageSize)

    query selectByUserAndEvent(user: Ref<User>, event: Ref<Event>) =
      rows().filter { _.user == user && _.event == event }

    query selectByUserAndItems(user: Ref<User>, items: Collection<Ref<Item>>) =
      rows().filter { _.user == user && _.item in items }
  }

  // 사용자가 해당 아이템을 공유 그룹을 통해 접근할 수 있게 된 경우
  entity UserGroupItem(
    item: Ref<Item>
    user: Ref<User>
    group: Ref<ShareGroup>
  ) {
    key(item, user, group)
    storage = SqlTable(db, "user_group_items")

    query selectByUserAndItem(user: Ref<User>, item: Ref<Item>) =
      rows().filter { _.user == user && _.item == item }
  }

  enum ItemReactionType {
    0 Unspecified, 1 Like, 2 Love, 3 Check, 4 Smile, 5 Funny, 6 Surprise, 7 Sad
  }

  entity ShareGroup(
    computed final id: Long = simpleTimeBasedId()
    createUser: Ref<User>

    // canHaveReadOnlyMember=true이면 ShareGroupMember에서 canWrite=false인 read-only 멤버를 가질 수 있다
    // 즉, canHaveReadOnlyMembers=true이면 album으로, false이면 share bucket으로 본다
    canHaveReadOnlyMember: Boolean

    name: String
    description: String

    itemsCount: Int
    itemsStartTime: Timestamp
    itemsEndTime: Timestamp

    eventsCount: Int

    thumbnailItem: Ref<Item>?
    summaryItems: SummaryItems?

    createTime: Timestamp
  ) {
    key(id)
    storage = SqlTable(db, "share_groups")

    lock {
      releaseNotifier = shareGroupReleaseNotifier
    }

    query findByKey(finding: Ref<ShareGroup>) = rows().findOrNull(key == finding)

    query selectByKeys(findings: Collection<Ref<ShareGroup>>) = rows().filter(key in findings)
  }

  entity ShareGroupItem(
    group: Ref<ShareGroup>
    item: Ref<Item>
    itemCreateTime: Timestamp
    // item을 group에 추가한 사용자
    addUser: Ref<User>
    // share group 내에서 이 아이템이 속한 이벤트
    event: Ref<ShareGroupEvent>?
    // 이 아이템을 이벤트에 사용자가 명시적으로 추가한 것이면 추가한 사용자
    eventAssignedUser: Ref<User>? = null
  ) {
    key(group, item)
    index(group, addUser)
    index(item, addUser)
    storage = SqlTable(db, "share_group_items")

    lock {
      releaseNotifier = shareGroupItemReleaseNotifier
    }

    pageToken SelectShareGroupItemByItemCreateTimeDesc(1 itemCreateTime desc, 2 group asc)

    query selectByGroup(group: Ref<ShareGroup>, pageToken: SelectShareGroupItemByItemCreateTimeDesc?, pageSize: Int) =
      rows().filter { _.group == group }.pageBy(pageToken, pageSize)
  }

  entity ShareGroupEvent(
    computed final id: Long = simpleTimeBasedId()
    group: Ref<ShareGroup>

    name: String
    description: String

    itemsCount: Int
    itemsStartTime: Timestamp
    itemsEndTime: Timestamp

    summaryItems: SummaryItems?

    lastUpdateUser: Ref<User>? = null
  ) {
    key(id)
    storage = SqlTable(db, "share_group_events")

    lock {
      releaseNotifier = shareGroupEventReleaseNotifier
    }
  }

  // ShareGroupMember는 공유 그룹의 에디터 권한을 가진 사용자들.
  // 읽기 전용 멤버는 GroupSpace에 포함
  entity ShareGroupMember(
    group: Ref<ShareGroup>
    member: Ref<User>
    inviteUser: Ref<User>?
    joinTime: Timestamp
    // canWrite가 false이면 읽기 전용 멤버
    canWrite: Boolean
  ) {
    key(group, member)
    storage = SqlTable(db, "share_group_members")

    lock {
      releaseNotifier = shareGroupMemberReleaseNotifier
    }

    pageToken SelectShareGroupMemberByJoinTimeDesc(1 joinTime desc, 2 key asc)

    query selectByMember(member: Ref<User>, pageToken: SelectShareGroupMemberByJoinTimeDesc?, pageSize: Int) =
      rows().filter { _.member == member }.pageBy(pageToken, pageSize)

    query selectByGroup(group: Ref<ShareGroup>, count: Int) =
      // 순서는?
      rows().filter { _.group == group }.take(count)

    query selectByGroup(group: Ref<ShareGroup>) =
      // 순서는?
      rows().filter { _.group == group }

    query findByGroupAndMember(group: Ref<ShareGroup>, member: Ref<User>) =
      rows().findOrNull { _.group == group && _.member == member }
  }



  entity Friend(
    user: Ref<User>
    friend: Ref<User>
    computed final createTime: Timestamp = now()
  ) {
    key(user, friend)
    storage = SqlTable(db, "friends")

    lock {
      releaseNotifier = friendReleaseNotifier
    }

    view FriendView(1 user, 2 friend, 3 createTime)
  }

  entity PhoneBookEntry(
    1 user: Ref<User>
    2 phoneNumber: String
    3 name: String
    computed final 4 createTime: Timestamp = now()
    // 전화번호로 사용자를 초대한 경우 초대한 시각이 inviteTime에 들어간다
    // 해당 번호(phoneNumber)를 가진 사용자가 가입하는 경우 자동으로 Friend에 추가한다
    5 inviteTime: Timestamp? = null
  ) {
    key(user, phoneNumber)
    index(phoneNumber)
    storage = SqlTable(db, "phone_book_entries")

    lock {
      releaseNotifier = phoneBookEntryReleaseNotifier
    }

    view PhoneBookEntryView(1 user, 2 phoneNumber, 3 name, 4 createTime, 5 inviteTime)
  }
}
