//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ids.proto

package com.giyeok.bibix;

@kotlin.jvm.JvmSynthetic
public inline fun sourceHashId(block: com.giyeok.bibix.SourceHashIdKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.BibixIdProto.SourceHashId =
  com.giyeok.bibix.SourceHashIdKt.Dsl._create(com.giyeok.bibix.BibixIdProto.SourceHashId.newBuilder()).apply { block() }._build()
public object SourceHashIdKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.BibixIdProto.SourceHashId.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.BibixIdProto.SourceHashId.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.BibixIdProto.SourceHashId = _builder.build()

    /**
     * <pre>
     * source_hash는 source의 내용이 변경되면 같이 변경되는 해시. git repository라면 commit id가 적당할 것
     * </pre>
     *
     * <code>bytes source_hash = 1;</code>
     */
    public var sourceHash: com.google.protobuf.ByteString
      @JvmName("getSourceHash")
      get() = _builder.getSourceHash()
      @JvmName("setSourceHash")
      set(value) {
        _builder.setSourceHash(value)
      }
    /**
     * <pre>
     * source_hash는 source의 내용이 변경되면 같이 변경되는 해시. git repository라면 commit id가 적당할 것
     * </pre>
     *
     * <code>bytes source_hash = 1;</code>
     */
    public fun clearSourceHash() {
      _builder.clearSourceHash()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.giyeok.bibix.BibixIdProto.SourceHashId.copy(block: com.giyeok.bibix.SourceHashIdKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.BibixIdProto.SourceHashId =
  com.giyeok.bibix.SourceHashIdKt.Dsl._create(this.toBuilder()).apply { block() }._build()
