// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: repo.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.giyeok.bibix.repo;

@kotlin.jvm.JvmName("-initializeactionLogs")
public inline fun actionLogs(block: com.giyeok.bibix.repo.ActionLogsKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.ActionLogs =
  com.giyeok.bibix.repo.ActionLogsKt.Dsl._create(com.giyeok.bibix.repo.BibixRepoProto.ActionLogs.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.giyeok.bibix.repo.ActionLogs`
 */
public object ActionLogsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.repo.BibixRepoProto.ActionLogs.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.repo.BibixRepoProto.ActionLogs.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.repo.BibixRepoProto.ActionLogs = _builder.build()

    /**
     * `string unique_run_id = 1;`
     */
    public var uniqueRunId: kotlin.String
      @JvmName("getUniqueRunId")
      get() = _builder.getUniqueRunId()
      @JvmName("setUniqueRunId")
      set(value) {
        _builder.setUniqueRunId(value)
      }
    /**
     * `string unique_run_id = 1;`
     */
    public fun clearUniqueRunId() {
      _builder.clearUniqueRunId()
    }

    /**
     * `int32 project_id = 2;`
     */
    public var projectId: kotlin.Int
      @JvmName("getProjectId")
      get() = _builder.getProjectId()
      @JvmName("setProjectId")
      set(value) {
        _builder.setProjectId(value)
      }
    /**
     * `int32 project_id = 2;`
     */
    public fun clearProjectId() {
      _builder.clearProjectId()
    }

    /**
     * `int32 import_instance_id = 3;`
     */
    public var importInstanceId: kotlin.Int
      @JvmName("getImportInstanceId")
      get() = _builder.getImportInstanceId()
      @JvmName("setImportInstanceId")
      set(value) {
        _builder.setImportInstanceId(value)
      }
    /**
     * `int32 import_instance_id = 3;`
     */
    public fun clearImportInstanceId() {
      _builder.clearImportInstanceId()
    }

    /**
     * `string action_name = 4;`
     */
    public var actionName: kotlin.String
      @JvmName("getActionName")
      get() = _builder.getActionName()
      @JvmName("setActionName")
      set(value) {
        _builder.setActionName(value)
      }
    /**
     * `string action_name = 4;`
     */
    public fun clearActionName() {
      _builder.clearActionName()
    }

    /**
     * `.com.giyeok.bibix.repo.LogBlocks blocks = 5;`
     */
    public var blocks: com.giyeok.bibix.repo.BibixRepoProto.LogBlocks
      @JvmName("getBlocks")
      get() = _builder.getBlocks()
      @JvmName("setBlocks")
      set(value) {
        _builder.setBlocks(value)
      }
    /**
     * `.com.giyeok.bibix.repo.LogBlocks blocks = 5;`
     */
    public fun clearBlocks() {
      _builder.clearBlocks()
    }
    /**
     * `.com.giyeok.bibix.repo.LogBlocks blocks = 5;`
     * @return Whether the blocks field is set.
     */
    public fun hasBlocks(): kotlin.Boolean {
      return _builder.hasBlocks()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun com.giyeok.bibix.repo.BibixRepoProto.ActionLogs.copy(block: com.giyeok.bibix.repo.ActionLogsKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.ActionLogs =
  com.giyeok.bibix.repo.ActionLogsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.giyeok.bibix.repo.BibixRepoProto.ActionLogsOrBuilder.blocksOrNull: com.giyeok.bibix.repo.BibixRepoProto.LogBlocks?
  get() = if (hasBlocks()) getBlocks() else null

