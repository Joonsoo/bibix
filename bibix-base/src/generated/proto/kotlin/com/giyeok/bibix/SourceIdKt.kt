//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ids.proto

package com.giyeok.bibix;

@kotlin.jvm.JvmSynthetic
public inline fun sourceId(block: com.giyeok.bibix.SourceIdKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.BibixIdProto.SourceId =
  com.giyeok.bibix.SourceIdKt.Dsl._create(com.giyeok.bibix.BibixIdProto.SourceId.newBuilder()).apply { block() }._build()
public object SourceIdKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.BibixIdProto.SourceId.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.BibixIdProto.SourceId.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.BibixIdProto.SourceId = _builder.build()

    /**
     * <code>.google.protobuf.Empty main_source = 1;</code>
     */
    public var mainSource: com.google.protobuf.Empty
      @JvmName("getMainSource")
      get() = _builder.getMainSource()
      @JvmName("setMainSource")
      set(value) {
        _builder.setMainSource(value)
      }
    /**
     * <code>.google.protobuf.Empty main_source = 1;</code>
     */
    public fun clearMainSource() {
      _builder.clearMainSource()
    }
    /**
     * <code>.google.protobuf.Empty main_source = 1;</code>
     * @return Whether the mainSource field is set.
     */
    public fun hasMainSource(): kotlin.Boolean {
      return _builder.hasMainSource()
    }

    /**
     * <code>string preloaded_plugin = 2;</code>
     */
    public var preloadedPlugin: kotlin.String
      @JvmName("getPreloadedPlugin")
      get() = _builder.getPreloadedPlugin()
      @JvmName("setPreloadedPlugin")
      set(value) {
        _builder.setPreloadedPlugin(value)
      }
    /**
     * <code>string preloaded_plugin = 2;</code>
     */
    public fun clearPreloadedPlugin() {
      _builder.clearPreloadedPlugin()
    }
    /**
     * <code>string preloaded_plugin = 2;</code>
     * @return Whether the preloadedPlugin field is set.
     */
    public fun hasPreloadedPlugin(): kotlin.Boolean {
      return _builder.hasPreloadedPlugin()
    }

    /**
     * <code>.com.giyeok.bibix.ExternalBibixProject extern_plugin_objhash = 3;</code>
     */
    public var externPluginObjhash: com.giyeok.bibix.BibixIdProto.ExternalBibixProject
      @JvmName("getExternPluginObjhash")
      get() = _builder.getExternPluginObjhash()
      @JvmName("setExternPluginObjhash")
      set(value) {
        _builder.setExternPluginObjhash(value)
      }
    /**
     * <code>.com.giyeok.bibix.ExternalBibixProject extern_plugin_objhash = 3;</code>
     */
    public fun clearExternPluginObjhash() {
      _builder.clearExternPluginObjhash()
    }
    /**
     * <code>.com.giyeok.bibix.ExternalBibixProject extern_plugin_objhash = 3;</code>
     * @return Whether the externPluginObjhash field is set.
     */
    public fun hasExternPluginObjhash(): kotlin.Boolean {
      return _builder.hasExternPluginObjhash()
    }
    public val sourceCase: com.giyeok.bibix.BibixIdProto.SourceId.SourceCase
      @JvmName("getSourceCase")
      get() = _builder.getSourceCase()

    public fun clearSource() {
      _builder.clearSource()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.giyeok.bibix.BibixIdProto.SourceId.copy(block: com.giyeok.bibix.SourceIdKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.BibixIdProto.SourceId =
  com.giyeok.bibix.SourceIdKt.Dsl._create(this.toBuilder()).apply { block() }._build()
