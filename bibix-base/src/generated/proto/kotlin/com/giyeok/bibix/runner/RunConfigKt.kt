// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: run_config.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.giyeok.bibix.runner;

@kotlin.jvm.JvmName("-initializerunConfig")
public inline fun runConfig(block: com.giyeok.bibix.runner.RunConfigKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.runner.RunConfigProto.RunConfig =
  com.giyeok.bibix.runner.RunConfigKt.Dsl._create(com.giyeok.bibix.runner.RunConfigProto.RunConfig.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.giyeok.bibix.runner.RunConfig`
 */
public object RunConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.runner.RunConfigProto.RunConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.runner.RunConfigProto.RunConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.runner.RunConfigProto.RunConfig = _builder.build()

    /**
     * `int32 max_threads = 1;`
     */
    public var maxThreads: kotlin.Int
      @JvmName("getMaxThreads")
      get() = _builder.getMaxThreads()
      @JvmName("setMaxThreads")
      set(value) {
        _builder.setMaxThreads(value)
      }
    /**
     * `int32 max_threads = 1;`
     */
    public fun clearMaxThreads() {
      _builder.clearMaxThreads()
    }

    /**
     * `.com.giyeok.bibix.repo.LogLevel min_log_level = 2;`
     */
    public var minLogLevel: com.giyeok.bibix.repo.BibixRepoProto.LogLevel
      @JvmName("getMinLogLevel")
      get() = _builder.getMinLogLevel()
      @JvmName("setMinLogLevel")
      set(value) {
        _builder.setMinLogLevel(value)
      }
    public var minLogLevelValue: kotlin.Int
      @JvmName("getMinLogLevelValue")
      get() = _builder.getMinLogLevelValue()
      @JvmName("setMinLogLevelValue")
      set(value) {
        _builder.setMinLogLevelValue(value)
      }
    /**
     * `.com.giyeok.bibix.repo.LogLevel min_log_level = 2;`
     */
    public fun clearMinLogLevel() {
      _builder.clearMinLogLevel()
    }

    /**
     * `.google.protobuf.Duration target_result_reuse_duration = 3;`
     */
    public var targetResultReuseDuration: com.google.protobuf.Duration
      @JvmName("getTargetResultReuseDuration")
      get() = _builder.getTargetResultReuseDuration()
      @JvmName("setTargetResultReuseDuration")
      set(value) {
        _builder.setTargetResultReuseDuration(value)
      }
    /**
     * `.google.protobuf.Duration target_result_reuse_duration = 3;`
     */
    public fun clearTargetResultReuseDuration() {
      _builder.clearTargetResultReuseDuration()
    }
    /**
     * `.google.protobuf.Duration target_result_reuse_duration = 3;`
     * @return Whether the targetResultReuseDuration field is set.
     */
    public fun hasTargetResultReuseDuration(): kotlin.Boolean {
      return _builder.hasTargetResultReuseDuration()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun com.giyeok.bibix.runner.RunConfigProto.RunConfig.copy(block: com.giyeok.bibix.runner.RunConfigKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.runner.RunConfigProto.RunConfig =
  com.giyeok.bibix.runner.RunConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.giyeok.bibix.runner.RunConfigProto.RunConfigOrBuilder.targetResultReuseDurationOrNull: com.google.protobuf.Duration?
  get() = if (hasTargetResultReuseDuration()) getTargetResultReuseDuration() else null

