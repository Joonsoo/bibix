// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: repo.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.giyeok.bibix.repo;

@kotlin.jvm.JvmName("-initializetargetLogs")
public inline fun targetLogs(block: com.giyeok.bibix.repo.TargetLogsKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.TargetLogs =
  com.giyeok.bibix.repo.TargetLogsKt.Dsl._create(com.giyeok.bibix.repo.BibixRepoProto.TargetLogs.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.giyeok.bibix.repo.TargetLogs`
 */
public object TargetLogsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.repo.BibixRepoProto.TargetLogs.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.repo.BibixRepoProto.TargetLogs.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.repo.BibixRepoProto.TargetLogs = _builder.build()

    /**
     * `string unique_run_id = 1;`
     */
    public var uniqueRunId: kotlin.String
      @JvmName("getUniqueRunId")
      get() = _builder.getUniqueRunId()
      @JvmName("setUniqueRunId")
      set(value) {
        _builder.setUniqueRunId(value)
      }
    /**
     * `string unique_run_id = 1;`
     */
    public fun clearUniqueRunId() {
      _builder.clearUniqueRunId()
    }

    /**
     * `string target_id = 2;`
     */
    public var targetId: kotlin.String
      @JvmName("getTargetId")
      get() = _builder.getTargetId()
      @JvmName("setTargetId")
      set(value) {
        _builder.setTargetId(value)
      }
    /**
     * `string target_id = 2;`
     */
    public fun clearTargetId() {
      _builder.clearTargetId()
    }

    /**
     * `.com.giyeok.bibix.repo.LogBlocks blocks = 3;`
     */
    public var blocks: com.giyeok.bibix.repo.BibixRepoProto.LogBlocks
      @JvmName("getBlocks")
      get() = _builder.getBlocks()
      @JvmName("setBlocks")
      set(value) {
        _builder.setBlocks(value)
      }
    /**
     * `.com.giyeok.bibix.repo.LogBlocks blocks = 3;`
     */
    public fun clearBlocks() {
      _builder.clearBlocks()
    }
    /**
     * `.com.giyeok.bibix.repo.LogBlocks blocks = 3;`
     * @return Whether the blocks field is set.
     */
    public fun hasBlocks(): kotlin.Boolean {
      return _builder.hasBlocks()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun com.giyeok.bibix.repo.BibixRepoProto.TargetLogs.copy(block: com.giyeok.bibix.repo.TargetLogsKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.TargetLogs =
  com.giyeok.bibix.repo.TargetLogsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.giyeok.bibix.repo.BibixRepoProto.TargetLogsOrBuilder.blocksOrNull: com.giyeok.bibix.repo.BibixRepoProto.LogBlocks?
  get() = if (hasBlocks()) getBlocks() else null

