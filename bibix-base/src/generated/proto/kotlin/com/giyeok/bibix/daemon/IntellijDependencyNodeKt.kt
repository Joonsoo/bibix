//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package com.giyeok.bibix.daemon;

@kotlin.jvm.JvmSynthetic
public inline fun intellijDependencyNode(block: com.giyeok.bibix.daemon.IntellijDependencyNodeKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode =
  com.giyeok.bibix.daemon.IntellijDependencyNodeKt.Dsl._create(com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode.newBuilder()).apply { block() }._build()
public object IntellijDependencyNodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode = _builder.build()

    /**
     * <code>string library_name = 1;</code>
     */
    public var libraryName: kotlin.String
      @JvmName("getLibraryName")
      get() = _builder.getLibraryName()
      @JvmName("setLibraryName")
      set(value) {
        _builder.setLibraryName(value)
      }
    /**
     * <code>string library_name = 1;</code>
     */
    public fun clearLibraryName() {
      _builder.clearLibraryName()
    }
    /**
     * <code>string library_name = 1;</code>
     * @return Whether the libraryName field is set.
     */
    public fun hasLibraryName(): kotlin.Boolean {
      return _builder.hasLibraryName()
    }

    /**
     * <code>string module_name = 2;</code>
     */
    public var moduleName: kotlin.String
      @JvmName("getModuleName")
      get() = _builder.getModuleName()
      @JvmName("setModuleName")
      set(value) {
        _builder.setModuleName(value)
      }
    /**
     * <code>string module_name = 2;</code>
     */
    public fun clearModuleName() {
      _builder.clearModuleName()
    }
    /**
     * <code>string module_name = 2;</code>
     * @return Whether the moduleName field is set.
     */
    public fun hasModuleName(): kotlin.Boolean {
      return _builder.hasModuleName()
    }
    public val dependencyCase: com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode.DependencyCase
      @JvmName("getDependencyCase")
      get() = _builder.getDependencyCase()

    public fun clearDependency() {
      _builder.clearDependency()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode.copy(block: com.giyeok.bibix.daemon.IntellijDependencyNodeKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.daemon.BibixDaemonApiProto.IntellijDependencyNode =
  com.giyeok.bibix.daemon.IntellijDependencyNodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()
