// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: repo.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.giyeok.bibix.repo;

@kotlin.jvm.JvmName("-initializebibixTargetLogs")
public inline fun bibixTargetLogs(block: com.giyeok.bibix.repo.BibixTargetLogsKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs =
  com.giyeok.bibix.repo.BibixTargetLogsKt.Dsl._create(com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs.newBuilder()).apply { block() }._build()
/**
 * ```
 * log는 양이 많아질 수도 있고, BibixRepoData는 바이너리로 저장해도 별 문제가 없을것 같지만 log는 human-readable하게 저장하는 것이 좋을 것 같아서 별도 파일로 저장한다
 * ```
 *
 * Protobuf type `com.giyeok.bibix.repo.BibixTargetLogs`
 */
public object BibixTargetLogsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TargetLogsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     */
     public val targetLogs: com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTargetLogsList()
      )
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     * @param value The targetLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTargetLogs")
    public fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>.add(value: com.giyeok.bibix.repo.BibixRepoProto.TargetLogs) {
      _builder.addTargetLogs(value)
    }
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     * @param value The targetLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTargetLogs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>.plusAssign(value: com.giyeok.bibix.repo.BibixRepoProto.TargetLogs) {
      add(value)
    }
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     * @param values The targetLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTargetLogs")
    public fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>.addAll(values: kotlin.collections.Iterable<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs>) {
      _builder.addAllTargetLogs(values)
    }
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     * @param values The targetLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTargetLogs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>.plusAssign(values: kotlin.collections.Iterable<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs>) {
      addAll(values)
    }
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     * @param index The index to set the value at.
     * @param value The targetLogs to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTargetLogs")
    public operator fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>.set(index: kotlin.Int, value: com.giyeok.bibix.repo.BibixRepoProto.TargetLogs) {
      _builder.setTargetLogs(index, value)
    }
    /**
     * ```
     * target_logs도 map으로 하고 싶은데 그러면 TargetLogs builder를 얻어올 수가 없어서 repeated로 사용
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.TargetLogs target_logs = 1;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTargetLogs")
    public fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.TargetLogs, TargetLogsProxy>.clear() {
      _builder.clearTargetLogs()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ActionLogsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     */
     public val actionLogs: com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getActionLogsList()
      )
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     * @param value The actionLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addActionLogs")
    public fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>.add(value: com.giyeok.bibix.repo.BibixRepoProto.ActionLogs) {
      _builder.addActionLogs(value)
    }
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     * @param value The actionLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignActionLogs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>.plusAssign(value: com.giyeok.bibix.repo.BibixRepoProto.ActionLogs) {
      add(value)
    }
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     * @param values The actionLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllActionLogs")
    public fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>.addAll(values: kotlin.collections.Iterable<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs>) {
      _builder.addAllActionLogs(values)
    }
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     * @param values The actionLogs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllActionLogs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>.plusAssign(values: kotlin.collections.Iterable<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs>) {
      addAll(values)
    }
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     * @param index The index to set the value at.
     * @param value The actionLogs to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setActionLogs")
    public operator fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>.set(index: kotlin.Int, value: com.giyeok.bibix.repo.BibixRepoProto.ActionLogs) {
      _builder.setActionLogs(index, value)
    }
    /**
     * ```
     * action은 target과 별도로 관리 - target id가 없기 때문
     * ```
     *
     * `repeated .com.giyeok.bibix.repo.ActionLogs action_logs = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearActionLogs")
    public fun com.google.protobuf.kotlin.DslList<com.giyeok.bibix.repo.BibixRepoProto.ActionLogs, ActionLogsProxy>.clear() {
      _builder.clearActionLogs()
    }

  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs.copy(block: com.giyeok.bibix.repo.BibixTargetLogsKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.BibixTargetLogs =
  com.giyeok.bibix.repo.BibixTargetLogsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

