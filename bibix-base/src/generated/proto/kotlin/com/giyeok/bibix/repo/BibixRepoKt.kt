//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: repo.proto

package com.giyeok.bibix.repo;

@kotlin.jvm.JvmSynthetic
public inline fun bibixRepo(block: com.giyeok.bibix.repo.BibixRepoKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.BibixRepo =
  com.giyeok.bibix.repo.BibixRepoKt.Dsl._create(com.giyeok.bibix.repo.BibixRepoProto.BibixRepo.newBuilder()).apply { block() }._build()
public object BibixRepoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.giyeok.bibix.repo.BibixRepoProto.BibixRepo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.repo.BibixRepoProto.BibixRepo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.repo.BibixRepoProto.BibixRepo = _builder.build()

    /**
     * <pre>
     * source id hash -&gt; source id
     * target id hash -&gt; target id(including args map &amp; input hashes)
     * </pre>
     *
     * <code>string repo_schema_version = 1;</code>
     */
    public var repoSchemaVersion: kotlin.String
      @JvmName("getRepoSchemaVersion")
      get() = _builder.getRepoSchemaVersion()
      @JvmName("setRepoSchemaVersion")
      set(value) {
        _builder.setRepoSchemaVersion(value)
      }
    /**
     * <pre>
     * source id hash -&gt; source id
     * target id hash -&gt; target id(including args map &amp; input hashes)
     * </pre>
     *
     * <code>string repo_schema_version = 1;</code>
     */
    public fun clearRepoSchemaVersion() {
      _builder.clearRepoSchemaVersion()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ObjectsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .com.giyeok.bibix.repo.ObjectInfo&gt; objects = 2;</code>
     */
     public val objects: com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo, ObjectsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getObjectsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getObjectsMap()
      )
    /**
     * <code>map&lt;string, .com.giyeok.bibix.repo.ObjectInfo&gt; objects = 2;</code>
     */
    @JvmName("putObjects")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo, ObjectsProxy>
      .put(key: kotlin.String, value: com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo) {
         _builder.putObjects(key, value)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.repo.ObjectInfo&gt; objects = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setObjects")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo, ObjectsProxy>
      .set(key: kotlin.String, value: com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.repo.ObjectInfo&gt; objects = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeObjects")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo, ObjectsProxy>
      .remove(key: kotlin.String) {
         _builder.removeObjects(key)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.repo.ObjectInfo&gt; objects = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllObjects")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo, ObjectsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo>) {
         _builder.putAllObjects(map)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.repo.ObjectInfo&gt; objects = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearObjects")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.repo.BibixRepoProto.ObjectInfo, ObjectsProxy>
      .clear() {
         _builder.clearObjects()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class BuildingTargetsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, bool&gt; building_targets = 3;</code>
     */
     public val buildingTargets: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Boolean, BuildingTargetsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getBuildingTargetsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getBuildingTargetsMap()
      )
    /**
     * <code>map&lt;string, bool&gt; building_targets = 3;</code>
     */
    @JvmName("putBuildingTargets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Boolean, BuildingTargetsProxy>
      .put(key: kotlin.String, value: kotlin.Boolean) {
         _builder.putBuildingTargets(key, value)
       }
    /**
     * <code>map&lt;string, bool&gt; building_targets = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setBuildingTargets")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Boolean, BuildingTargetsProxy>
      .set(key: kotlin.String, value: kotlin.Boolean) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, bool&gt; building_targets = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeBuildingTargets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Boolean, BuildingTargetsProxy>
      .remove(key: kotlin.String) {
         _builder.removeBuildingTargets(key)
       }
    /**
     * <code>map&lt;string, bool&gt; building_targets = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllBuildingTargets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Boolean, BuildingTargetsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Boolean>) {
         _builder.putAllBuildingTargets(map)
       }
    /**
     * <code>map&lt;string, bool&gt; building_targets = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearBuildingTargets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Boolean, BuildingTargetsProxy>
      .clear() {
         _builder.clearBuildingTargets()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ObjectNamesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, string&gt; object_names = 4;</code>
     */
     public val objectNames: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ObjectNamesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getObjectNamesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getObjectNamesMap()
      )
    /**
     * <code>map&lt;string, string&gt; object_names = 4;</code>
     */
    @JvmName("putObjectNames")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ObjectNamesProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putObjectNames(key, value)
       }
    /**
     * <code>map&lt;string, string&gt; object_names = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setObjectNames")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ObjectNamesProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, string&gt; object_names = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeObjectNames")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ObjectNamesProxy>
      .remove(key: kotlin.String) {
         _builder.removeObjectNames(key)
       }
    /**
     * <code>map&lt;string, string&gt; object_names = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllObjectNames")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ObjectNamesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllObjectNames(map)
       }
    /**
     * <code>map&lt;string, string&gt; object_names = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearObjectNames")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ObjectNamesProxy>
      .clear() {
         _builder.clearObjectNames()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SourcesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .com.giyeok.bibix.SourceId&gt; sources = 5;</code>
     */
     public val sources: com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId, SourcesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSourcesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getSourcesMap()
      )
    /**
     * <code>map&lt;string, .com.giyeok.bibix.SourceId&gt; sources = 5;</code>
     */
    @JvmName("putSources")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId, SourcesProxy>
      .put(key: kotlin.String, value: com.giyeok.bibix.BibixIdProto.SourceId) {
         _builder.putSources(key, value)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.SourceId&gt; sources = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSources")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId, SourcesProxy>
      .set(key: kotlin.String, value: com.giyeok.bibix.BibixIdProto.SourceId) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.SourceId&gt; sources = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSources")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId, SourcesProxy>
      .remove(key: kotlin.String) {
         _builder.removeSources(key)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.SourceId&gt; sources = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSources")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId, SourcesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId>) {
         _builder.putAllSources(map)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.SourceId&gt; sources = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSources")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.SourceId, SourcesProxy>
      .clear() {
         _builder.clearSources()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ObjectIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .com.giyeok.bibix.ObjectId&gt; object_ids = 6;</code>
     */
     public val objectIds: com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId, ObjectIdsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getObjectIdsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getObjectIdsMap()
      )
    /**
     * <code>map&lt;string, .com.giyeok.bibix.ObjectId&gt; object_ids = 6;</code>
     */
    @JvmName("putObjectIds")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId, ObjectIdsProxy>
      .put(key: kotlin.String, value: com.giyeok.bibix.BibixIdProto.ObjectId) {
         _builder.putObjectIds(key, value)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.ObjectId&gt; object_ids = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setObjectIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId, ObjectIdsProxy>
      .set(key: kotlin.String, value: com.giyeok.bibix.BibixIdProto.ObjectId) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.ObjectId&gt; object_ids = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeObjectIds")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId, ObjectIdsProxy>
      .remove(key: kotlin.String) {
         _builder.removeObjectIds(key)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.ObjectId&gt; object_ids = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllObjectIds")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId, ObjectIdsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId>) {
         _builder.putAllObjectIds(map)
       }
    /**
     * <code>map&lt;string, .com.giyeok.bibix.ObjectId&gt; object_ids = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearObjectIds")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.giyeok.bibix.BibixIdProto.ObjectId, ObjectIdsProxy>
      .clear() {
         _builder.clearObjectIds()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.giyeok.bibix.repo.BibixRepoProto.BibixRepo.copy(block: com.giyeok.bibix.repo.BibixRepoKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.repo.BibixRepoProto.BibixRepo =
  com.giyeok.bibix.repo.BibixRepoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
