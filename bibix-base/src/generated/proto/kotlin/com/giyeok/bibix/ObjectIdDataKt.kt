//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ids.proto

package com.giyeok.bibix;

@kotlin.jvm.JvmName("-initializeobjectIdData")
inline fun objectIdData(block: com.giyeok.bibix.ObjectIdDataKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.BibixIdProto.ObjectIdData =
  com.giyeok.bibix.ObjectIdDataKt.Dsl._create(com.giyeok.bibix.BibixIdProto.ObjectIdData.newBuilder()).apply { block() }._build()
object ObjectIdDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.giyeok.bibix.BibixIdProto.ObjectIdData.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.giyeok.bibix.BibixIdProto.ObjectIdData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.giyeok.bibix.BibixIdProto.ObjectIdData = _builder.build()

    /**
     * <code>bytes target_id = 1;</code>
     */
    var targetId: com.google.protobuf.ByteString
      @JvmName("getTargetId")
      get() = _builder.getTargetId()
      @JvmName("setTargetId")
      set(value) {
        _builder.setTargetId(value)
      }
    /**
     * <code>bytes target_id = 1;</code>
     */
    fun clearTargetId() {
      _builder.clearTargetId()
    }

    /**
     * <code>bytes inputs_hash = 2;</code>
     */
    var inputsHash: com.google.protobuf.ByteString
      @JvmName("getInputsHash")
      get() = _builder.getInputsHash()
      @JvmName("setInputsHash")
      set(value) {
        _builder.setInputsHash(value)
      }
    /**
     * <code>bytes inputs_hash = 2;</code>
     */
    fun clearInputsHash() {
      _builder.clearInputsHash()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.giyeok.bibix.BibixIdProto.ObjectIdData.copy(block: com.giyeok.bibix.ObjectIdDataKt.Dsl.() -> kotlin.Unit): com.giyeok.bibix.BibixIdProto.ObjectIdData =
  com.giyeok.bibix.ObjectIdDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

