syntax = "proto3";

package com.giyeok.bibix;

import "values.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option java_outer_classname = "BibixIdProto";

message SourceId {
  // external_plugin_objhash 인 경우를 제외하고는 비빅스 버전을 적어야 함
  optional string bibix_version = 1;
  oneof source {
    google.protobuf.Empty prelude_source = 2;
    google.protobuf.Empty main_source = 3;
    string preloaded_plugin = 4;
    ExternalBibixProject external_plugin_objhash = 5;
  }
}

message ExternalBibixProject {
  string root_directory = 1;
  string script_name = 2;
  // bytes script_hash = 3;
}

message TargetIdData {
  SourceId source_id = 1;
  // string target_name = 2;
  SourceId build_rule_source_id = 2;
  oneof build_rule {
    google.protobuf.Empty native_impl = 3;
    BuildRuleImplId build_rule_impl_id = 4;
  }
  string build_rule_class_name = 5;
  string build_rule_method_name = 6;
  ArgsMap args_map = 7;
}

message BuildRuleImplId {
  SourceId source_id = 1;
  bytes target_id = 2;
  bytes object_id = 3;
}

// 빌드된 결과물에 대한 ID. target id와 input hash에 대한 해시값으로 만들어진다.
message ObjectIdData {
  bytes target_id = 1;
  bytes inputs_hash = 2;
}

//message ObjectIdHash {
// hash는 object의 내용이 조금이라도 바뀌었으면 바뀌어야 되는 값.
// root_source나 main_source는 bibix 버전이 들어가면 되려나..?
//  oneof hash {
//    string root_source = 1;
//    string bibix_internal_source = 2;
//    bytes object_id_hash_string = 3;
//  }
//}

message ArgsMap {
  repeated ArgPair pairs = 1;
}

message ArgPair {
  string name = 1;
  BibixValue value = 2;
}

message InputHashes {
  repeated DirectoryHash directories = 1;
  repeated FileHash files = 2;
  repeated string non_existent = 3;
}

// path는 해당 프로젝트의 root script 기준 상대 경로
message DirectoryHash {
  string path = 1;
  repeated DirectoryHash directories = 2;
  repeated FileHash files = 3;
}

message FileHash {
  string path = 1;
  google.protobuf.Timestamp last_modified_time = 2;
  int64 size = 3;
  bytes sha1_hash = 4;
}
